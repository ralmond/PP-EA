// ~->[DNET-1]->~

// File created by AlmondR_2 at FLStateU using Netica 5.10 on Jan 17, 2020 at 17:42:29.

bnet Gravity {
autoupdate = FALSE;
title = "Gravity";
whenchanged = 1579300949;
user U1 {
	Truename = "Gravity";
	Hub = "PP_OrangeNodes_6";
	Pathname = "Gravity.dne";
	};

param X_NSL_3 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NSL";
	whenchanged = 1579300683;
	};

param X_NFL_3 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NFL";
	whenchanged = 1579300683;
	};

node AppropriateSlider {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (almostAlways, mostly, mostlyNot, almostNever);
	statetitles = ("almost always", "mostly", "mostlyNot", "almost never");
	StateComments = ("#Irrelvant < 2", "#Irrelvant < #Relevant", "#relevant <= #Irrevalnt", "#relevant < 2");
	inputs = (NFL, NSL);
	parents = (X_NFL_3, X_NSL_3);
	probs = 
		// almost always mostly      mostlyNot    almost never  // NFL    NSL    
		  (0.9895685,   0.01032274,  1.076823e-4, 1.123294e-6,  // High   High   
		   0.9813417,   0.01831025,  3.416396e-4, 6.374442e-6,  // High   Medium 
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // High   Low    
		   0.9813417,   0.01831025,  3.416396e-4, 6.374442e-6,  // Medium High   
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // Medium Medium 
		   0.9403189,   0.05613048,  0.003350598, 2.000073e-4,  // Medium Low    
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // Low    High   
		   0.9403189,   0.05613048,  0.003350598, 2.000073e-4,  // Low    Medium 
		   0.8933463,   0.09538238,  0.01018396,  0.001087339); // Low    Low    ;
	numcases = 10;
	title = "Slider";
	whenchanged = 1579300683;
	user U1 {
		Truename = "AppropriateSlider";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = 3:2, .Dimnames = list(     c(\"596\", \
			\"597\", \"598\"), c(\"NFL\", \"NSL\")))";
		lnAlphas = "list(c(NFL = -0.693147180559945, NSL = -0.693147180559945), c(NFL = -0.693147180559945,  NSL = \
			-0.693147180559945), c(NFL = -0.693147180559945, NSL = -0.693147180559945 ))";
		betas = "list(-2L, -2L, -2L)";
		priorWeight = "10";
		};
	};

param X_NSL_2 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NSL";
	whenchanged = 1579300683;
	};

param X_NFL_2 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NFL";
	whenchanged = 1579300683;
	};

node SliderAdjust {
	kind = NATURE;
	discrete = FALSE;
	chance = CHANCE;
	states = (Zero, One, Two, MorethanTwo);
	levels = (0, 0.1, 1.1, 2.1, INFINITY);
	inputs = (NFL, NSL);
	parents = (X_NFL_2, X_NSL_2);
	probs = 
		// Zero         One          Two          MorethanTwo   // NFL    NSL    
		  (0.9895685,   0.01032274,  1.076823e-4, 1.123294e-6,  // High   High   
		   0.9813417,   0.01831025,  3.416396e-4, 6.374442e-6,  // High   Medium 
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // High   Low    
		   0.9813417,   0.01831025,  3.416396e-4, 6.374442e-6,  // Medium High   
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // Medium Medium 
		   0.9403189,   0.05613048,  0.003350598, 2.000073e-4,  // Medium Low    
		   0.966628,    0.03225954,  0.001076606, 3.592987e-5,  // Low    High   
		   0.9403189,   0.05613048,  0.003350598, 2.000073e-4,  // Low    Medium 
		   0.8933463,   0.09538238,  0.01018396,  0.001087339); // Low    Low    ;
	numcases = 10;
	title = "Number of slider adjustment";
	whenchanged = 1579300683;
	user U1 {
		Truename = "SliderAdjust";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = 3:2, .Dimnames = list(     c(\"593\", \
			\"594\", \"595\"), c(\"NFL\", \"NSL\")))";
		lnAlphas = "list(c(NFL = -0.693147180559945, NSL = -0.693147180559945), c(NFL = -0.693147180559945,  NSL = \
			-0.693147180559945), c(NFL = -0.693147180559945, NSL = -0.693147180559945 ))";
		betas = "list(-2L, -2L, -2L)";
		priorWeight = "10";
		};
	};

param X_NSL_1 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NSL";
	whenchanged = 1579300682;
	};

param X_NFL_1 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	title = "NFL";
	whenchanged = 1579300682;
	};

node TrophyLevel {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Gold, Silver, None);
	levels = (2, 1, 0);
	inputs = (NFL, NSL);
	parents = (X_NFL_1, X_NSL_1);
	probs = 
		// Gold         Silver       None          // NFL    NSL    
		  (0.9895695,   0.01032275,  1.076824e-4,  // High   High   
		   0.981348,    0.01831037,  3.416418e-4,  // High   Medium 
		   0.9666626,   0.03226069,  0.001076645,  // High   Low    
		   0.981348,    0.01831037,  3.416418e-4,  // Medium High   
		   0.9666626,   0.03226069,  0.001076645,  // Medium Medium 
		   0.9405071,   0.0561417,   0.003351268,  // Medium Low    
		   0.9666626,   0.03226069,  0.001076645,  // Low    High   
		   0.9405071,   0.0561417,   0.003351268,  // Low    Medium 
		   0.8943188,   0.09548621,  0.01019504);  // Low    Low    ;
	numcases = 10;
	title = "Level solving status";
	whenchanged = 1579300682;
	user U1 {
		Truename = "TrophyLevel";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(     c(\"591\", \
			\"592\"), c(\"NFL\", \"NSL\")))";
		lnAlphas = "list(c(NFL = -0.693147180559945, NSL = -0.693147180559945), c(NFL = -0.693147180559945,  NSL = \
			-0.693147180559945))";
		betas = "list(-2L, -2L)";
		priorWeight = "10";
		};
	};
NodeSet pnodes {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider);};
NodeSet Observable {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider);};
};
