// ~->[DNET-1]->~

// File created by AlmondR at FloridaStateU using Netica 6.07 on 05/28/2020 at 08:03:30 PM UTC.

bnet Lollipop {
autoupdate = FALSE;
title = "Lollipop";
whenchanged = 1590696210;
user U1 {
	Truename = "Lollipop";
	Hub = "PP_OrangeNodes_6";
	Pathname = "./Lollipop.dne";
	};

param X_StaticEquilibrium_4 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695281;
	};

param X_PropertiesofTorque_4 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695281;
	};

node Duration {
	discrete = FALSE;
	states = (Q1, Q2, Q3, Q4);
	levels = (0, 0.388, 103.576, 369.259, INFINITY);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_4, X_StaticEquilibrium_4);
	probs = 
		// Q1           Q2           Q3           Q4            // PropertiesofTorque StaticEquilibrium 
		  (0.776312,    0.1752156,   0.03954662,  0.008925776,  // High               High              
		   0.494342,    0.2725475,   0.1502646,   0.08284596,   // High               Medium            
		   0.1514395,   0.2039539,   0.2746785,   0.3699281,    // High               Low               
		   0.6076919,   0.2487743,   0.1018421,   0.04169167,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.04169167,  0.1018421,   0.2487743,   0.6076919,    // Medium             Low               
		   0.3699281,   0.2746785,   0.2039539,   0.1514395,    // Low                High              
		   0.08284596,  0.1502646,   0.2725475,   0.494342,     // Low                Medium            
		   0.008925776, 0.03954662,  0.1752156,   0.776312);    // Low                Low               ;
	numcases = 10;
	title = "Duration to solve level";
	whenchanged = 1590696020;
	user U1 {
		Truename = "Duration";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"327\",\
			\| \"328\", \"329\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.669430653942629, -0.263965545834465), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.669430653942629, -0.263965545834465 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.669430653942629,  \
			-0.263965545834465), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_3 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695280;
	};

param X_PropertiesofTorque_3 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695280;
	};

node AppropriateSlider {
	discrete = TRUE;
	states = (almostAlways, mostly, mostlyNot, almostNever);
	statetitles = ("almost always", "mostly", "mostlyNot", "almost never");
	StateComments = ("#Irrelvant < 2", "#Irrelvant < #Relevant", "#relevant <= #Irrevalnt", "#relevant < 2");
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_3, X_StaticEquilibrium_3);
	probs = 
		// almost always mostly      mostlyNot    almost never  // PropertiesofTorque StaticEquilibrium 
		  (0.776312,    0.1752156,   0.03954662,  0.008925776,  // High               High              
		   0.494342,    0.2725475,   0.1502646,   0.08284596,   // High               Medium            
		   0.1514395,   0.2039539,   0.2746785,   0.3699281,    // High               Low               
		   0.6076919,   0.2487743,   0.1018421,   0.04169167,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.04169167,  0.1018421,   0.2487743,   0.6076919,    // Medium             Low               
		   0.3699281,   0.2746785,   0.2039539,   0.1514395,    // Low                High              
		   0.08284596,  0.1502646,   0.2725475,   0.494342,     // Low                Medium            
		   0.008925776, 0.03954662,  0.1752156,   0.776312);    // Low                Low               ;
	numcases = 10;
	title = "Slider";
	whenchanged = 1590696020;
	user U1 {
		Truename = "AppropriateSlider";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"324\",\
			\| \"325\", \"326\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.669430653942629, -0.263965545834465), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.669430653942629, -0.263965545834465 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.669430653942629,  \
			-0.263965545834465), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_2 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695280;
	};

param X_PropertiesofTorque_2 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695280;
	};

node SliderAdjust {
	discrete = FALSE;
	states = (Zero, One, Two, MorethanTwo);
	levels = (0, 0.1, 1.1, 2.1, INFINITY);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_2, X_StaticEquilibrium_2);
	probs = 
		// Zero         One          Two          MorethanTwo   // PropertiesofTorque StaticEquilibrium 
		  (0.776312,    0.1752156,   0.03954662,  0.008925776,  // High               High              
		   0.494342,    0.2725475,   0.1502646,   0.08284596,   // High               Medium            
		   0.1514395,   0.2039539,   0.2746785,   0.3699281,    // High               Low               
		   0.6076919,   0.2487743,   0.1018421,   0.04169167,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.04169167,  0.1018421,   0.2487743,   0.6076919,    // Medium             Low               
		   0.3699281,   0.2746785,   0.2039539,   0.1514395,    // Low                High              
		   0.08284596,  0.1502646,   0.2725475,   0.494342,     // Low                Medium            
		   0.008925776, 0.03954662,  0.1752156,   0.776312);    // Low                Low               ;
	numcases = 10;
	title = "Number of slider adjustment";
	whenchanged = 1590696019;
	user U1 {
		Truename = "SliderAdjust";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"321\",\
			\| \"322\", \"323\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.669430653942629, -0.263965545834465), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.669430653942629, -0.263965545834465 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.669430653942629,  \
			-0.263965545834465), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_1 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695279;
	};

param X_PropertiesofTorque_1 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695279;
	};

node TrophyLevel {
	discrete = TRUE;
	states = (Gold, Silver, None);
	levels = (2, 1, 0);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_1, X_StaticEquilibrium_1);
	probs = 
		// Gold         Silver       None          // PropertiesofTorque StaticEquilibrium 
		  (0.7833036,   0.1767936,   0.03990279,   // High               High              
		   0.5389956,   0.2971665,   0.1638379,    // High               Medium            
		   0.2403528,   0.3236994,   0.4359478,    // High               Low               
		   0.6341299,   0.2595973,   0.1062728,    // Medium             High              
		   0.3333333,   0.3333333,   0.3333333,    // Medium             Medium            
		   0.1062728,   0.2595973,   0.6341299,    // Medium             Low               
		   0.4359478,   0.3236994,   0.2403528,    // Low                High              
		   0.1638379,   0.2971665,   0.5389956,    // Low                Medium            
		   0.03990279,  0.1767936,   0.7833036);   // Low                Low               ;
	numcases = 10;
	title = "Level solving status";
	whenchanged = 1590696019;
	user U1 {
		Truename = "TrophyLevel";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(     c(\"319\", \
			\"320\"), c(\"PropertiesofTorque\", \"StaticEquilibrium\"     )))";
		lnAlphas = "list(structure(c(-0.669430653942629, -0.263965545834465), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.669430653942629, -0.263965545834465 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")))";
		betas = "list(0L, 0L)";
		priorWeight = "10";
		};
	};
NodeSet pnodes {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider, Duration);};
NodeSet Observable {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider, Duration);};
};
