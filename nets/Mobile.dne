// ~->[DNET-1]->~

// File created by AlmondR at FloridaStateU using Netica 6.07 on 07/06/2020 at 04:31:42 PM UTC.

bnet Mobile {
autoupdate = FALSE;
title = "Mobile";
whenchanged = 1594052934;
user U1 {
	Truename = "Mobile";
	Hub = "PP_OrangeNodes_6";
	Pathname = "/home/ralmond/Projects/PP-EA/nets/Mobile.dne";
	};

param X_StaticEquilibrium_4 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695285;
	};

param X_PropertiesofTorque_4 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695285;
	};

node Duration {
	discrete = FALSE;
	states = (Q1, Q2, Q3, Q4);
	levels = (0, 0.423, 62.318, 122.719, INFINITY);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_4, X_StaticEquilibrium_4);
	probs = 
		// Q1           Q2           Q3           Q4            // PropertiesofTorque StaticEquilibrium 
		  (0.8449267,   0.1314437,   0.02044845,  0.003181128,  // High               High              
		   0.5530939,   0.2627648,   0.1248347,   0.05930669,   // High               Medium            
		   0.1314133,   0.1906581,   0.2766121,   0.4013165,    // High               Low               
		   0.6803671,   0.22279,     0.07295383,  0.02388914,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.02388914,  0.07295383,  0.22279,     0.6803671,    // Medium             Low               
		   0.4013165,   0.2766121,   0.1906581,   0.1314133,    // Low                High              
		   0.05930669,  0.1248347,   0.2627648,   0.5530939,    // Low                Medium            
		   0.003181128, 0.02044845,  0.1314437,   0.8449267);   // Low                Low               ;
	numcases = 10;
	title = "Duration to solve level";
	whenchanged = 1594052934;
	user U1 {
		Truename = "Duration";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"350\",\
			\| \"351\", \"352\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.446287102628419, -0.0408219945202552), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.446287102628419, -0.0408219945202552 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.446287102628419,  \
			-0.0408219945202552), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_3 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695285;
	};

param X_PropertiesofTorque_3 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695285;
	};

node AppropriateSlider {
	discrete = TRUE;
	states = (almostAlways, mostly, mostlyNot, almostNever);
	statetitles = ("almost always", "mostly", "mostlyNot", "almost never");
	StateComments = ("#Irrelvant < 2", "#Irrelvant < #Relevant", "#relevant <= #Irrevalnt", "#relevant < 2");
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_3, X_StaticEquilibrium_3);
	probs = 
		// almost always mostly      mostlyNot    almost never  // PropertiesofTorque StaticEquilibrium 
		  (0.8449267,   0.1314437,   0.02044845,  0.003181128,  // High               High              
		   0.5530939,   0.2627648,   0.1248347,   0.05930669,   // High               Medium            
		   0.1314133,   0.1906581,   0.2766121,   0.4013165,    // High               Low               
		   0.6803671,   0.22279,     0.07295383,  0.02388914,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.02388914,  0.07295383,  0.22279,     0.6803671,    // Medium             Low               
		   0.4013165,   0.2766121,   0.1906581,   0.1314133,    // Low                High              
		   0.05930669,  0.1248347,   0.2627648,   0.5530939,    // Low                Medium            
		   0.003181128, 0.02044845,  0.1314437,   0.8449267);   // Low                Low               ;
	numcases = 10;
	title = "Slider";
	whenchanged = 1594052934;
	user U1 {
		Truename = "AppropriateSlider";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"347\",\
			\| \"348\", \"349\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.446287102628419, -0.0408219945202552), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.446287102628419, -0.0408219945202552 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.446287102628419,  \
			-0.0408219945202552), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_2 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695284;
	};

param X_PropertiesofTorque_2 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695284;
	};

node SliderAdjust {
	discrete = FALSE;
	states = (Zero, One, Two, MorethanTwo);
	levels = (0, 0.1, 1.1, 2.1, INFINITY);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_2, X_StaticEquilibrium_2);
	probs = 
		// Zero         One          Two          MorethanTwo   // PropertiesofTorque StaticEquilibrium 
		  (0.8449267,   0.1314437,   0.02044845,  0.003181128,  // High               High              
		   0.5530939,   0.2627648,   0.1248347,   0.05930669,   // High               Medium            
		   0.1314133,   0.1906581,   0.2766121,   0.4013165,    // High               Low               
		   0.6803671,   0.22279,     0.07295383,  0.02388914,   // Medium             High              
		   0.25,        0.25,        0.25,        0.25,         // Medium             Medium            
		   0.02388914,  0.07295383,  0.22279,     0.6803671,    // Medium             Low               
		   0.4013165,   0.2766121,   0.1906581,   0.1314133,    // Low                High              
		   0.05930669,  0.1248347,   0.2627648,   0.5530939,    // Low                Medium            
		   0.003181128, 0.02044845,  0.1314437,   0.8449267);   // Low                Low               ;
	numcases = 10;
	title = "Number of slider adjustment";
	whenchanged = 1594052933;
	user U1 {
		Truename = "SliderAdjust";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(3L,  2L), .Dimnames = list(c(\"344\",\
			\| \"345\", \"346\"), c(\"PropertiesofTorque\",  \"StaticEquilibrium\")))";
		lnAlphas = "list(structure(c(-0.446287102628419, -0.0408219945202552), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.446287102628419, -0.0408219945202552 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")), structure(c(-0.446287102628419,  \
			-0.0408219945202552), .Names = c(\"PropertiesofTorque\", \"StaticEquilibrium\" )))";
		betas = "list(0L, 0L, 0L)";
		priorWeight = "10";
		};
	};

param X_StaticEquilibrium_1 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "StaticEquilibrium";
	whenchanged = 1590695284;
	};

param X_PropertiesofTorque_1 {
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.9674215661, 0, -0.9674215661);
	kind = DISCONNECTED;
	title = "PropertiesofTorque";
	whenchanged = 1590695284;
	};

node TrophyLevel {
	discrete = TRUE;
	states = (Gold, Silver, None);
	levels = (2, 1, 0);
	kind = NATURE;
	chance = CHANCE;
	inputs = (PropertiesofTorque, StaticEquilibrium);
	parents = (X_PropertiesofTorque_1, X_StaticEquilibrium_1);
	probs = 
		// Gold         Silver       None          // PropertiesofTorque StaticEquilibrium 
		  (0.8476231,   0.1318632,   0.02051371,   // High               High              
		   0.5879641,   0.2793309,   0.132705,     // High               Medium            
		   0.2195038,   0.3184623,   0.4620339,    // High               Low               
		   0.6970182,   0.2282425,   0.07473928,   // Medium             High              
		   0.3333333,   0.3333333,   0.3333333,    // Medium             Medium            
		   0.07473928,  0.2282425,   0.6970182,    // Medium             Low               
		   0.4620339,   0.3184623,   0.2195038,    // Low                High              
		   0.132705,    0.2793309,   0.5879641,    // Low                Medium            
		   0.02051371,  0.1318632,   0.8476231);   // Low                Low               ;
	numcases = 10;
	title = "Level solving status";
	whenchanged = 1594052933;
	user U1 {
		Truename = "TrophyLevel";
		link = "\"partialCredit\"";
		rules = "\"Compensatory\"";
		Q = "structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(     c(\"342\", \
			\"343\"), c(\"PropertiesofTorque\", \"StaticEquilibrium\"     )))";
		lnAlphas = "list(structure(c(-0.446287102628419, -0.0408219945202552), .Names = c(\"PropertiesofTorque\",  \
			\"StaticEquilibrium\")), structure(c(-0.446287102628419, -0.0408219945202552 ), .Names = \
			c(\"PropertiesofTorque\", \"StaticEquilibrium\")))";
		betas = "list(0L, 0L)";
		priorWeight = "10";
		};
	};
NodeSet pnodes {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider, Duration);};
NodeSet Observable {Nodes = (TrophyLevel, SliderAdjust, AppropriateSlider, Duration);};
};
